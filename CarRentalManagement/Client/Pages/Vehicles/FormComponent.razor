@inject HttpClient _client

<h3 class="card-title">Create new Vehicle</h3>

<hr />
<br />
<EditForm Model="@vehicle" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">

        <div class="form-control">
            <label>Make: </label>
            <div>
                <select @bind="vehicle.MakeId" class="form-control">
                    <option value="">--Select Make --</option>
                    @if (Makes != null)
                    {
                        foreach (var make in Makes)
                        {
                            <option value="@make.Id">@make.Name</option>
                        }
                    }
                </select>
                <ValidationMessage For="@(()=>vehicle.MakeId)" />
            </div>
        </div>
        <div class="form-control">
            <label>Model: </label>
            <div>
                <select @bind="vehicle.ModelId" class="form-control">
                    <option value="">--Select Model --</option>
                    @if (Models != null)
                    {
                        foreach (var model in Models)
                        {
                            <option value="@model.Id">@model.Name</option>
                        }
                    }
                </select>
                <ValidationMessage For="@(()=>vehicle.ModelId)" />
            </div>
        </div>
        <div class="form-control">
            <label>Colour: </label>
            <div>
                <InputSelect @bind-Value="vehicle.ColourId" class="form-control">
                    <option value="">--Select Colour --</option>
                    @if (Colours != null)
                    {
                        foreach (var colour in Colours)
                        {
                            <option value="@colour.Id">@colour.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(()=>vehicle.ColourId)" />
            </div>
        </div>
        <div class="form-group">
            <label>Year:</label>
            <div>
                <InputNumber @bind-Value="@vehicle.Year" class="form-control" />
                <ValidationMessage For="@(()=>vehicle.Year)" />
            </div>
        </div>
        <div class="form-group">
            <label>License Plate Numeber:</label>
            <div>
                <InputText @bind-Value="@vehicle.LicensePlateNumber" class="form-control" />
                <ValidationMessage For="@(()=>vehicle.LicensePlateNumber)" />
            </div>
        </div>
        <div class="form-group">
            <label>Vehicle Identification Number:</label>
            <div>
                <InputText @bind-Value="@vehicle.Vin" class="form-control" />
                <ValidationMessage For="@(()=>vehicle.Vin)" />
            </div>
        </div>
        <div class="form-group">
            <label>Daily Rate:</label>
            <div>
                <InputNumber @bind-Value="@vehicle.RentalRate" class="form-control" />
                <ValidationMessage For="@(()=>vehicle.RentalRate)" />
            </div>
        </div>
    </fieldset>
    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="vehicles" />
</EditForm>



@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Vehicle vehicle { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    private IList<Make> Makes;
    private IList<Model> Models;
    private IList<Colour> Colours;
    protected async override Task OnInitializedAsync()
    {
        Makes = await _client.GetFromJsonAsync<List<Make>>(Endpoints.MakesEndpoint);
        Models = await _client.GetFromJsonAsync<List<Model>>($"{Endpoints.ModelsEndpoint}");
        Colours = await _client.GetFromJsonAsync<List<Colour>>($"{Endpoints.ColoursEndpoint}");

    }

}
